/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TaskResource = {
  id?: number | undefined;
  name?: string | null | undefined;
  taskName?: string | null | undefined;
  interval?: number | undefined;
  lastExecution?: Date | undefined;
  lastStartTime?: Date | undefined;
  nextExecution?: Date | undefined;
  lastDuration?: string | undefined;
};

/** @internal */
export const TaskResource$inboundSchema: z.ZodType<
  TaskResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.nullable(z.string()).optional(),
  taskName: z.nullable(z.string()).optional(),
  interval: z.number().int().optional(),
  lastExecution: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  lastStartTime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  nextExecution: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  lastDuration: z.string().optional(),
});

/** @internal */
export type TaskResource$Outbound = {
  id?: number | undefined;
  name?: string | null | undefined;
  taskName?: string | null | undefined;
  interval?: number | undefined;
  lastExecution?: string | undefined;
  lastStartTime?: string | undefined;
  nextExecution?: string | undefined;
  lastDuration?: string | undefined;
};

/** @internal */
export const TaskResource$outboundSchema: z.ZodType<
  TaskResource$Outbound,
  z.ZodTypeDef,
  TaskResource
> = z.object({
  id: z.number().int().optional(),
  name: z.nullable(z.string()).optional(),
  taskName: z.nullable(z.string()).optional(),
  interval: z.number().int().optional(),
  lastExecution: z.date().transform(v => v.toISOString()).optional(),
  lastStartTime: z.date().transform(v => v.toISOString()).optional(),
  nextExecution: z.date().transform(v => v.toISOString()).optional(),
  lastDuration: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskResource$ {
  /** @deprecated use `TaskResource$inboundSchema` instead. */
  export const inboundSchema = TaskResource$inboundSchema;
  /** @deprecated use `TaskResource$outboundSchema` instead. */
  export const outboundSchema = TaskResource$outboundSchema;
  /** @deprecated use `TaskResource$Outbound` instead. */
  export type Outbound = TaskResource$Outbound;
}

export function taskResourceToJSON(taskResource: TaskResource): string {
  return JSON.stringify(TaskResource$outboundSchema.parse(taskResource));
}

export function taskResourceFromJSON(
  jsonString: string,
): SafeParseResult<TaskResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaskResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaskResource' from JSON`,
  );
}
