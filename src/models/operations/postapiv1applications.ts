/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostApiV1ApplicationsRequest = {
  forceSave?: boolean | undefined;
  applicationResource?: models.ApplicationResource | undefined;
};

/** @internal */
export const PostApiV1ApplicationsRequest$inboundSchema: z.ZodType<
  PostApiV1ApplicationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  forceSave: z.boolean().default(false),
  ApplicationResource: models.ApplicationResource$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ApplicationResource": "applicationResource",
  });
});

/** @internal */
export type PostApiV1ApplicationsRequest$Outbound = {
  forceSave: boolean;
  ApplicationResource?: models.ApplicationResource$Outbound | undefined;
};

/** @internal */
export const PostApiV1ApplicationsRequest$outboundSchema: z.ZodType<
  PostApiV1ApplicationsRequest$Outbound,
  z.ZodTypeDef,
  PostApiV1ApplicationsRequest
> = z.object({
  forceSave: z.boolean().default(false),
  applicationResource: models.ApplicationResource$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    applicationResource: "ApplicationResource",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiV1ApplicationsRequest$ {
  /** @deprecated use `PostApiV1ApplicationsRequest$inboundSchema` instead. */
  export const inboundSchema = PostApiV1ApplicationsRequest$inboundSchema;
  /** @deprecated use `PostApiV1ApplicationsRequest$outboundSchema` instead. */
  export const outboundSchema = PostApiV1ApplicationsRequest$outboundSchema;
  /** @deprecated use `PostApiV1ApplicationsRequest$Outbound` instead. */
  export type Outbound = PostApiV1ApplicationsRequest$Outbound;
}

export function postApiV1ApplicationsRequestToJSON(
  postApiV1ApplicationsRequest: PostApiV1ApplicationsRequest,
): string {
  return JSON.stringify(
    PostApiV1ApplicationsRequest$outboundSchema.parse(
      postApiV1ApplicationsRequest,
    ),
  );
}

export function postApiV1ApplicationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostApiV1ApplicationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostApiV1ApplicationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiV1ApplicationsRequest' from JSON`,
  );
}
