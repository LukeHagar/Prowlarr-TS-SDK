/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PutApiV1NotificationIdRequest = {
  forceSave?: boolean | undefined;
  id: string;
  notificationResource?: models.NotificationResource | undefined;
};

/** @internal */
export const PutApiV1NotificationIdRequest$inboundSchema: z.ZodType<
  PutApiV1NotificationIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  forceSave: z.boolean().default(false),
  id: z.string(),
  NotificationResource: models.NotificationResource$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "NotificationResource": "notificationResource",
  });
});

/** @internal */
export type PutApiV1NotificationIdRequest$Outbound = {
  forceSave: boolean;
  id: string;
  NotificationResource?: models.NotificationResource$Outbound | undefined;
};

/** @internal */
export const PutApiV1NotificationIdRequest$outboundSchema: z.ZodType<
  PutApiV1NotificationIdRequest$Outbound,
  z.ZodTypeDef,
  PutApiV1NotificationIdRequest
> = z.object({
  forceSave: z.boolean().default(false),
  id: z.string(),
  notificationResource: models.NotificationResource$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    notificationResource: "NotificationResource",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiV1NotificationIdRequest$ {
  /** @deprecated use `PutApiV1NotificationIdRequest$inboundSchema` instead. */
  export const inboundSchema = PutApiV1NotificationIdRequest$inboundSchema;
  /** @deprecated use `PutApiV1NotificationIdRequest$outboundSchema` instead. */
  export const outboundSchema = PutApiV1NotificationIdRequest$outboundSchema;
  /** @deprecated use `PutApiV1NotificationIdRequest$Outbound` instead. */
  export type Outbound = PutApiV1NotificationIdRequest$Outbound;
}

export function putApiV1NotificationIdRequestToJSON(
  putApiV1NotificationIdRequest: PutApiV1NotificationIdRequest,
): string {
  return JSON.stringify(
    PutApiV1NotificationIdRequest$outboundSchema.parse(
      putApiV1NotificationIdRequest,
    ),
  );
}

export function putApiV1NotificationIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutApiV1NotificationIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutApiV1NotificationIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiV1NotificationIdRequest' from JSON`,
  );
}
