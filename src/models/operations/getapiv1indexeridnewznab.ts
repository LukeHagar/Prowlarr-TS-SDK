/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiV1IndexerIdNewznabRequest = {
  id: number;
  t?: string | undefined;
  q?: string | undefined;
  cat?: string | undefined;
  imdbid?: string | undefined;
  tmdbid?: number | undefined;
  extended?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  minage?: number | undefined;
  maxage?: number | undefined;
  minsize?: number | undefined;
  maxsize?: number | undefined;
  rid?: number | undefined;
  tvmazeid?: number | undefined;
  traktid?: number | undefined;
  tvdbid?: number | undefined;
  doubanid?: number | undefined;
  season?: number | undefined;
  ep?: string | undefined;
  album?: string | undefined;
  artist?: string | undefined;
  label?: string | undefined;
  track?: string | undefined;
  year?: number | undefined;
  genre?: string | undefined;
  author?: string | undefined;
  title?: string | undefined;
  publisher?: string | undefined;
  configured?: string | undefined;
  source?: string | undefined;
  host?: string | undefined;
  server?: string | undefined;
};

/** @internal */
export const GetApiV1IndexerIdNewznabRequest$inboundSchema: z.ZodType<
  GetApiV1IndexerIdNewznabRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  t: z.string().optional(),
  q: z.string().optional(),
  cat: z.string().optional(),
  imdbid: z.string().optional(),
  tmdbid: z.number().int().optional(),
  extended: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  minage: z.number().int().optional(),
  maxage: z.number().int().optional(),
  minsize: z.number().int().optional(),
  maxsize: z.number().int().optional(),
  rid: z.number().int().optional(),
  tvmazeid: z.number().int().optional(),
  traktid: z.number().int().optional(),
  tvdbid: z.number().int().optional(),
  doubanid: z.number().int().optional(),
  season: z.number().int().optional(),
  ep: z.string().optional(),
  album: z.string().optional(),
  artist: z.string().optional(),
  label: z.string().optional(),
  track: z.string().optional(),
  year: z.number().int().optional(),
  genre: z.string().optional(),
  author: z.string().optional(),
  title: z.string().optional(),
  publisher: z.string().optional(),
  configured: z.string().optional(),
  source: z.string().optional(),
  host: z.string().optional(),
  server: z.string().optional(),
});

/** @internal */
export type GetApiV1IndexerIdNewznabRequest$Outbound = {
  id: number;
  t?: string | undefined;
  q?: string | undefined;
  cat?: string | undefined;
  imdbid?: string | undefined;
  tmdbid?: number | undefined;
  extended?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  minage?: number | undefined;
  maxage?: number | undefined;
  minsize?: number | undefined;
  maxsize?: number | undefined;
  rid?: number | undefined;
  tvmazeid?: number | undefined;
  traktid?: number | undefined;
  tvdbid?: number | undefined;
  doubanid?: number | undefined;
  season?: number | undefined;
  ep?: string | undefined;
  album?: string | undefined;
  artist?: string | undefined;
  label?: string | undefined;
  track?: string | undefined;
  year?: number | undefined;
  genre?: string | undefined;
  author?: string | undefined;
  title?: string | undefined;
  publisher?: string | undefined;
  configured?: string | undefined;
  source?: string | undefined;
  host?: string | undefined;
  server?: string | undefined;
};

/** @internal */
export const GetApiV1IndexerIdNewznabRequest$outboundSchema: z.ZodType<
  GetApiV1IndexerIdNewznabRequest$Outbound,
  z.ZodTypeDef,
  GetApiV1IndexerIdNewznabRequest
> = z.object({
  id: z.number().int(),
  t: z.string().optional(),
  q: z.string().optional(),
  cat: z.string().optional(),
  imdbid: z.string().optional(),
  tmdbid: z.number().int().optional(),
  extended: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  minage: z.number().int().optional(),
  maxage: z.number().int().optional(),
  minsize: z.number().int().optional(),
  maxsize: z.number().int().optional(),
  rid: z.number().int().optional(),
  tvmazeid: z.number().int().optional(),
  traktid: z.number().int().optional(),
  tvdbid: z.number().int().optional(),
  doubanid: z.number().int().optional(),
  season: z.number().int().optional(),
  ep: z.string().optional(),
  album: z.string().optional(),
  artist: z.string().optional(),
  label: z.string().optional(),
  track: z.string().optional(),
  year: z.number().int().optional(),
  genre: z.string().optional(),
  author: z.string().optional(),
  title: z.string().optional(),
  publisher: z.string().optional(),
  configured: z.string().optional(),
  source: z.string().optional(),
  host: z.string().optional(),
  server: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiV1IndexerIdNewznabRequest$ {
  /** @deprecated use `GetApiV1IndexerIdNewznabRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiV1IndexerIdNewznabRequest$inboundSchema;
  /** @deprecated use `GetApiV1IndexerIdNewznabRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiV1IndexerIdNewznabRequest$outboundSchema;
  /** @deprecated use `GetApiV1IndexerIdNewznabRequest$Outbound` instead. */
  export type Outbound = GetApiV1IndexerIdNewznabRequest$Outbound;
}

export function getApiV1IndexerIdNewznabRequestToJSON(
  getApiV1IndexerIdNewznabRequest: GetApiV1IndexerIdNewznabRequest,
): string {
  return JSON.stringify(
    GetApiV1IndexerIdNewznabRequest$outboundSchema.parse(
      getApiV1IndexerIdNewznabRequest,
    ),
  );
}

export function getApiV1IndexerIdNewznabRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiV1IndexerIdNewznabRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiV1IndexerIdNewznabRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiV1IndexerIdNewznabRequest' from JSON`,
  );
}
