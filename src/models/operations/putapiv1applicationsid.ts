/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PutApiV1ApplicationsIdRequest = {
  forceSave?: boolean | undefined;
  id: string;
  applicationResource?: models.ApplicationResource | undefined;
};

/** @internal */
export const PutApiV1ApplicationsIdRequest$inboundSchema: z.ZodType<
  PutApiV1ApplicationsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  forceSave: z.boolean().default(false),
  id: z.string(),
  ApplicationResource: models.ApplicationResource$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ApplicationResource": "applicationResource",
  });
});

/** @internal */
export type PutApiV1ApplicationsIdRequest$Outbound = {
  forceSave: boolean;
  id: string;
  ApplicationResource?: models.ApplicationResource$Outbound | undefined;
};

/** @internal */
export const PutApiV1ApplicationsIdRequest$outboundSchema: z.ZodType<
  PutApiV1ApplicationsIdRequest$Outbound,
  z.ZodTypeDef,
  PutApiV1ApplicationsIdRequest
> = z.object({
  forceSave: z.boolean().default(false),
  id: z.string(),
  applicationResource: models.ApplicationResource$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    applicationResource: "ApplicationResource",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiV1ApplicationsIdRequest$ {
  /** @deprecated use `PutApiV1ApplicationsIdRequest$inboundSchema` instead. */
  export const inboundSchema = PutApiV1ApplicationsIdRequest$inboundSchema;
  /** @deprecated use `PutApiV1ApplicationsIdRequest$outboundSchema` instead. */
  export const outboundSchema = PutApiV1ApplicationsIdRequest$outboundSchema;
  /** @deprecated use `PutApiV1ApplicationsIdRequest$Outbound` instead. */
  export type Outbound = PutApiV1ApplicationsIdRequest$Outbound;
}

export function putApiV1ApplicationsIdRequestToJSON(
  putApiV1ApplicationsIdRequest: PutApiV1ApplicationsIdRequest,
): string {
  return JSON.stringify(
    PutApiV1ApplicationsIdRequest$outboundSchema.parse(
      putApiV1ApplicationsIdRequest,
    ),
  );
}

export function putApiV1ApplicationsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutApiV1ApplicationsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutApiV1ApplicationsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiV1ApplicationsIdRequest' from JSON`,
  );
}
