/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PutApiV1TagIdRequest = {
  id: string;
  tagResource?: models.TagResource | undefined;
};

/** @internal */
export const PutApiV1TagIdRequest$inboundSchema: z.ZodType<
  PutApiV1TagIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  TagResource: models.TagResource$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "TagResource": "tagResource",
  });
});

/** @internal */
export type PutApiV1TagIdRequest$Outbound = {
  id: string;
  TagResource?: models.TagResource$Outbound | undefined;
};

/** @internal */
export const PutApiV1TagIdRequest$outboundSchema: z.ZodType<
  PutApiV1TagIdRequest$Outbound,
  z.ZodTypeDef,
  PutApiV1TagIdRequest
> = z.object({
  id: z.string(),
  tagResource: models.TagResource$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    tagResource: "TagResource",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiV1TagIdRequest$ {
  /** @deprecated use `PutApiV1TagIdRequest$inboundSchema` instead. */
  export const inboundSchema = PutApiV1TagIdRequest$inboundSchema;
  /** @deprecated use `PutApiV1TagIdRequest$outboundSchema` instead. */
  export const outboundSchema = PutApiV1TagIdRequest$outboundSchema;
  /** @deprecated use `PutApiV1TagIdRequest$Outbound` instead. */
  export type Outbound = PutApiV1TagIdRequest$Outbound;
}

export function putApiV1TagIdRequestToJSON(
  putApiV1TagIdRequest: PutApiV1TagIdRequest,
): string {
  return JSON.stringify(
    PutApiV1TagIdRequest$outboundSchema.parse(putApiV1TagIdRequest),
  );
}

export function putApiV1TagIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutApiV1TagIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutApiV1TagIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiV1TagIdRequest' from JSON`,
  );
}
