/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PutApiV1ConfigUiIdRequest = {
  id: string;
  uiConfigResource?: models.UiConfigResource | undefined;
};

/** @internal */
export const PutApiV1ConfigUiIdRequest$inboundSchema: z.ZodType<
  PutApiV1ConfigUiIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  UiConfigResource: models.UiConfigResource$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "UiConfigResource": "uiConfigResource",
  });
});

/** @internal */
export type PutApiV1ConfigUiIdRequest$Outbound = {
  id: string;
  UiConfigResource?: models.UiConfigResource$Outbound | undefined;
};

/** @internal */
export const PutApiV1ConfigUiIdRequest$outboundSchema: z.ZodType<
  PutApiV1ConfigUiIdRequest$Outbound,
  z.ZodTypeDef,
  PutApiV1ConfigUiIdRequest
> = z.object({
  id: z.string(),
  uiConfigResource: models.UiConfigResource$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    uiConfigResource: "UiConfigResource",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiV1ConfigUiIdRequest$ {
  /** @deprecated use `PutApiV1ConfigUiIdRequest$inboundSchema` instead. */
  export const inboundSchema = PutApiV1ConfigUiIdRequest$inboundSchema;
  /** @deprecated use `PutApiV1ConfigUiIdRequest$outboundSchema` instead. */
  export const outboundSchema = PutApiV1ConfigUiIdRequest$outboundSchema;
  /** @deprecated use `PutApiV1ConfigUiIdRequest$Outbound` instead. */
  export type Outbound = PutApiV1ConfigUiIdRequest$Outbound;
}

export function putApiV1ConfigUiIdRequestToJSON(
  putApiV1ConfigUiIdRequest: PutApiV1ConfigUiIdRequest,
): string {
  return JSON.stringify(
    PutApiV1ConfigUiIdRequest$outboundSchema.parse(putApiV1ConfigUiIdRequest),
  );
}

export function putApiV1ConfigUiIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutApiV1ConfigUiIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutApiV1ConfigUiIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiV1ConfigUiIdRequest' from JSON`,
  );
}
