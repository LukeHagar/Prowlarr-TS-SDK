/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DevelopmentConfigResource = {
  id?: number | undefined;
  consoleLogLevel?: string | null | undefined;
  logSql?: boolean | undefined;
  logIndexerResponse?: boolean | undefined;
  logRotate?: number | undefined;
  filterSentryEvents?: boolean | undefined;
};

/** @internal */
export const DevelopmentConfigResource$inboundSchema: z.ZodType<
  DevelopmentConfigResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  consoleLogLevel: z.nullable(z.string()).optional(),
  logSql: z.boolean().optional(),
  logIndexerResponse: z.boolean().optional(),
  logRotate: z.number().int().optional(),
  filterSentryEvents: z.boolean().optional(),
});

/** @internal */
export type DevelopmentConfigResource$Outbound = {
  id?: number | undefined;
  consoleLogLevel?: string | null | undefined;
  logSql?: boolean | undefined;
  logIndexerResponse?: boolean | undefined;
  logRotate?: number | undefined;
  filterSentryEvents?: boolean | undefined;
};

/** @internal */
export const DevelopmentConfigResource$outboundSchema: z.ZodType<
  DevelopmentConfigResource$Outbound,
  z.ZodTypeDef,
  DevelopmentConfigResource
> = z.object({
  id: z.number().int().optional(),
  consoleLogLevel: z.nullable(z.string()).optional(),
  logSql: z.boolean().optional(),
  logIndexerResponse: z.boolean().optional(),
  logRotate: z.number().int().optional(),
  filterSentryEvents: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DevelopmentConfigResource$ {
  /** @deprecated use `DevelopmentConfigResource$inboundSchema` instead. */
  export const inboundSchema = DevelopmentConfigResource$inboundSchema;
  /** @deprecated use `DevelopmentConfigResource$outboundSchema` instead. */
  export const outboundSchema = DevelopmentConfigResource$outboundSchema;
  /** @deprecated use `DevelopmentConfigResource$Outbound` instead. */
  export type Outbound = DevelopmentConfigResource$Outbound;
}

export function developmentConfigResourceToJSON(
  developmentConfigResource: DevelopmentConfigResource,
): string {
  return JSON.stringify(
    DevelopmentConfigResource$outboundSchema.parse(developmentConfigResource),
  );
}

export function developmentConfigResourceFromJSON(
  jsonString: string,
): SafeParseResult<DevelopmentConfigResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DevelopmentConfigResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DevelopmentConfigResource' from JSON`,
  );
}
