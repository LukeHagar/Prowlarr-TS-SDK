/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type IndexerStatistics = {
  indexerId?: number | undefined;
  indexerName?: string | null | undefined;
  averageResponseTime?: number | undefined;
  averageGrabResponseTime?: number | undefined;
  numberOfQueries?: number | undefined;
  numberOfGrabs?: number | undefined;
  numberOfRssQueries?: number | undefined;
  numberOfAuthQueries?: number | undefined;
  numberOfFailedQueries?: number | undefined;
  numberOfFailedGrabs?: number | undefined;
  numberOfFailedRssQueries?: number | undefined;
  numberOfFailedAuthQueries?: number | undefined;
};

/** @internal */
export const IndexerStatistics$inboundSchema: z.ZodType<
  IndexerStatistics,
  z.ZodTypeDef,
  unknown
> = z.object({
  indexerId: z.number().int().optional(),
  indexerName: z.nullable(z.string()).optional(),
  averageResponseTime: z.number().int().optional(),
  averageGrabResponseTime: z.number().int().optional(),
  numberOfQueries: z.number().int().optional(),
  numberOfGrabs: z.number().int().optional(),
  numberOfRssQueries: z.number().int().optional(),
  numberOfAuthQueries: z.number().int().optional(),
  numberOfFailedQueries: z.number().int().optional(),
  numberOfFailedGrabs: z.number().int().optional(),
  numberOfFailedRssQueries: z.number().int().optional(),
  numberOfFailedAuthQueries: z.number().int().optional(),
});

/** @internal */
export type IndexerStatistics$Outbound = {
  indexerId?: number | undefined;
  indexerName?: string | null | undefined;
  averageResponseTime?: number | undefined;
  averageGrabResponseTime?: number | undefined;
  numberOfQueries?: number | undefined;
  numberOfGrabs?: number | undefined;
  numberOfRssQueries?: number | undefined;
  numberOfAuthQueries?: number | undefined;
  numberOfFailedQueries?: number | undefined;
  numberOfFailedGrabs?: number | undefined;
  numberOfFailedRssQueries?: number | undefined;
  numberOfFailedAuthQueries?: number | undefined;
};

/** @internal */
export const IndexerStatistics$outboundSchema: z.ZodType<
  IndexerStatistics$Outbound,
  z.ZodTypeDef,
  IndexerStatistics
> = z.object({
  indexerId: z.number().int().optional(),
  indexerName: z.nullable(z.string()).optional(),
  averageResponseTime: z.number().int().optional(),
  averageGrabResponseTime: z.number().int().optional(),
  numberOfQueries: z.number().int().optional(),
  numberOfGrabs: z.number().int().optional(),
  numberOfRssQueries: z.number().int().optional(),
  numberOfAuthQueries: z.number().int().optional(),
  numberOfFailedQueries: z.number().int().optional(),
  numberOfFailedGrabs: z.number().int().optional(),
  numberOfFailedRssQueries: z.number().int().optional(),
  numberOfFailedAuthQueries: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndexerStatistics$ {
  /** @deprecated use `IndexerStatistics$inboundSchema` instead. */
  export const inboundSchema = IndexerStatistics$inboundSchema;
  /** @deprecated use `IndexerStatistics$outboundSchema` instead. */
  export const outboundSchema = IndexerStatistics$outboundSchema;
  /** @deprecated use `IndexerStatistics$Outbound` instead. */
  export type Outbound = IndexerStatistics$Outbound;
}

export function indexerStatisticsToJSON(
  indexerStatistics: IndexerStatistics,
): string {
  return JSON.stringify(
    IndexerStatistics$outboundSchema.parse(indexerStatistics),
  );
}

export function indexerStatisticsFromJSON(
  jsonString: string,
): SafeParseResult<IndexerStatistics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndexerStatistics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndexerStatistics' from JSON`,
  );
}
