/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ApplicationSyncLevel,
  ApplicationSyncLevel$inboundSchema,
  ApplicationSyncLevel$outboundSchema,
} from "./applicationsynclevel.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Field,
  Field$inboundSchema,
  Field$Outbound,
  Field$outboundSchema,
} from "./field.js";
import {
  ProviderMessage,
  ProviderMessage$inboundSchema,
  ProviderMessage$Outbound,
  ProviderMessage$outboundSchema,
} from "./providermessage.js";

export type ApplicationResource = {
  id?: number | undefined;
  name?: string | null | undefined;
  fields?: Array<Field> | null | undefined;
  implementationName?: string | null | undefined;
  implementation?: string | null | undefined;
  configContract?: string | null | undefined;
  infoLink?: string | null | undefined;
  message?: ProviderMessage | undefined;
  tags?: Array<number> | null | undefined;
  presets?: Array<ApplicationResource> | null | undefined;
  syncLevel?: ApplicationSyncLevel | undefined;
  testCommand?: string | null | undefined;
};

/** @internal */
export const ApplicationResource$inboundSchema: z.ZodType<
  ApplicationResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.nullable(z.string()).optional(),
  fields: z.nullable(z.array(Field$inboundSchema)).optional(),
  implementationName: z.nullable(z.string()).optional(),
  implementation: z.nullable(z.string()).optional(),
  configContract: z.nullable(z.string()).optional(),
  infoLink: z.nullable(z.string()).optional(),
  message: ProviderMessage$inboundSchema.optional(),
  tags: z.nullable(z.array(z.number().int())).optional(),
  presets: z.nullable(z.array(z.lazy(() => ApplicationResource$inboundSchema)))
    .optional(),
  syncLevel: ApplicationSyncLevel$inboundSchema.optional(),
  testCommand: z.nullable(z.string()).optional(),
});

/** @internal */
export type ApplicationResource$Outbound = {
  id?: number | undefined;
  name?: string | null | undefined;
  fields?: Array<Field$Outbound> | null | undefined;
  implementationName?: string | null | undefined;
  implementation?: string | null | undefined;
  configContract?: string | null | undefined;
  infoLink?: string | null | undefined;
  message?: ProviderMessage$Outbound | undefined;
  tags?: Array<number> | null | undefined;
  presets?: Array<ApplicationResource$Outbound> | null | undefined;
  syncLevel?: string | undefined;
  testCommand?: string | null | undefined;
};

/** @internal */
export const ApplicationResource$outboundSchema: z.ZodType<
  ApplicationResource$Outbound,
  z.ZodTypeDef,
  ApplicationResource
> = z.object({
  id: z.number().int().optional(),
  name: z.nullable(z.string()).optional(),
  fields: z.nullable(z.array(Field$outboundSchema)).optional(),
  implementationName: z.nullable(z.string()).optional(),
  implementation: z.nullable(z.string()).optional(),
  configContract: z.nullable(z.string()).optional(),
  infoLink: z.nullable(z.string()).optional(),
  message: ProviderMessage$outboundSchema.optional(),
  tags: z.nullable(z.array(z.number().int())).optional(),
  presets: z.nullable(z.array(z.lazy(() => ApplicationResource$outboundSchema)))
    .optional(),
  syncLevel: ApplicationSyncLevel$outboundSchema.optional(),
  testCommand: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationResource$ {
  /** @deprecated use `ApplicationResource$inboundSchema` instead. */
  export const inboundSchema = ApplicationResource$inboundSchema;
  /** @deprecated use `ApplicationResource$outboundSchema` instead. */
  export const outboundSchema = ApplicationResource$outboundSchema;
  /** @deprecated use `ApplicationResource$Outbound` instead. */
  export type Outbound = ApplicationResource$Outbound;
}

export function applicationResourceToJSON(
  applicationResource: ApplicationResource,
): string {
  return JSON.stringify(
    ApplicationResource$outboundSchema.parse(applicationResource),
  );
}

export function applicationResourceFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationResource' from JSON`,
  );
}
