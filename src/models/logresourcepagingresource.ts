/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  LogResource,
  LogResource$inboundSchema,
  LogResource$Outbound,
  LogResource$outboundSchema,
} from "./logresource.js";
import {
  SortDirection,
  SortDirection$inboundSchema,
  SortDirection$outboundSchema,
} from "./sortdirection.js";

export type LogResourcePagingResource = {
  page?: number | undefined;
  pageSize?: number | undefined;
  sortKey?: string | null | undefined;
  sortDirection?: SortDirection | undefined;
  totalRecords?: number | undefined;
  records?: Array<LogResource> | null | undefined;
};

/** @internal */
export const LogResourcePagingResource$inboundSchema: z.ZodType<
  LogResourcePagingResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  sortKey: z.nullable(z.string()).optional(),
  sortDirection: SortDirection$inboundSchema.optional(),
  totalRecords: z.number().int().optional(),
  records: z.nullable(z.array(LogResource$inboundSchema)).optional(),
});

/** @internal */
export type LogResourcePagingResource$Outbound = {
  page?: number | undefined;
  pageSize?: number | undefined;
  sortKey?: string | null | undefined;
  sortDirection?: string | undefined;
  totalRecords?: number | undefined;
  records?: Array<LogResource$Outbound> | null | undefined;
};

/** @internal */
export const LogResourcePagingResource$outboundSchema: z.ZodType<
  LogResourcePagingResource$Outbound,
  z.ZodTypeDef,
  LogResourcePagingResource
> = z.object({
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  sortKey: z.nullable(z.string()).optional(),
  sortDirection: SortDirection$outboundSchema.optional(),
  totalRecords: z.number().int().optional(),
  records: z.nullable(z.array(LogResource$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogResourcePagingResource$ {
  /** @deprecated use `LogResourcePagingResource$inboundSchema` instead. */
  export const inboundSchema = LogResourcePagingResource$inboundSchema;
  /** @deprecated use `LogResourcePagingResource$outboundSchema` instead. */
  export const outboundSchema = LogResourcePagingResource$outboundSchema;
  /** @deprecated use `LogResourcePagingResource$Outbound` instead. */
  export type Outbound = LogResourcePagingResource$Outbound;
}

export function logResourcePagingResourceToJSON(
  logResourcePagingResource: LogResourcePagingResource,
): string {
  return JSON.stringify(
    LogResourcePagingResource$outboundSchema.parse(logResourcePagingResource),
  );
}

export function logResourcePagingResourceFromJSON(
  jsonString: string,
): SafeParseResult<LogResourcePagingResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogResourcePagingResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogResourcePagingResource' from JSON`,
  );
}
