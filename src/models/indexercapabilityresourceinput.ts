/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  BookSearchParam,
  BookSearchParam$inboundSchema,
  BookSearchParam$outboundSchema,
} from "./booksearchparam.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  IndexerCategoryInput,
  IndexerCategoryInput$inboundSchema,
  IndexerCategoryInput$Outbound,
  IndexerCategoryInput$outboundSchema,
} from "./indexercategoryinput.js";
import {
  MovieSearchParam,
  MovieSearchParam$inboundSchema,
  MovieSearchParam$outboundSchema,
} from "./moviesearchparam.js";
import {
  MusicSearchParam,
  MusicSearchParam$inboundSchema,
  MusicSearchParam$outboundSchema,
} from "./musicsearchparam.js";
import {
  SearchParam,
  SearchParam$inboundSchema,
  SearchParam$outboundSchema,
} from "./searchparam.js";
import {
  TvSearchParam,
  TvSearchParam$inboundSchema,
  TvSearchParam$outboundSchema,
} from "./tvsearchparam.js";

export type IndexerCapabilityResourceInput = {
  id?: number | undefined;
  limitsMax?: number | null | undefined;
  limitsDefault?: number | null | undefined;
  categories?: Array<IndexerCategoryInput> | null | undefined;
  supportsRawSearch?: boolean | undefined;
  searchParams?: Array<SearchParam> | null | undefined;
  tvSearchParams?: Array<TvSearchParam> | null | undefined;
  movieSearchParams?: Array<MovieSearchParam> | null | undefined;
  musicSearchParams?: Array<MusicSearchParam> | null | undefined;
  bookSearchParams?: Array<BookSearchParam> | null | undefined;
};

/** @internal */
export const IndexerCapabilityResourceInput$inboundSchema: z.ZodType<
  IndexerCapabilityResourceInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  limitsMax: z.nullable(z.number().int()).optional(),
  limitsDefault: z.nullable(z.number().int()).optional(),
  categories: z.nullable(z.array(IndexerCategoryInput$inboundSchema))
    .optional(),
  supportsRawSearch: z.boolean().optional(),
  searchParams: z.nullable(z.array(SearchParam$inboundSchema)).optional(),
  tvSearchParams: z.nullable(z.array(TvSearchParam$inboundSchema)).optional(),
  movieSearchParams: z.nullable(z.array(MovieSearchParam$inboundSchema))
    .optional(),
  musicSearchParams: z.nullable(z.array(MusicSearchParam$inboundSchema))
    .optional(),
  bookSearchParams: z.nullable(z.array(BookSearchParam$inboundSchema))
    .optional(),
});

/** @internal */
export type IndexerCapabilityResourceInput$Outbound = {
  id?: number | undefined;
  limitsMax?: number | null | undefined;
  limitsDefault?: number | null | undefined;
  categories?: Array<IndexerCategoryInput$Outbound> | null | undefined;
  supportsRawSearch?: boolean | undefined;
  searchParams?: Array<string> | null | undefined;
  tvSearchParams?: Array<string> | null | undefined;
  movieSearchParams?: Array<string> | null | undefined;
  musicSearchParams?: Array<string> | null | undefined;
  bookSearchParams?: Array<string> | null | undefined;
};

/** @internal */
export const IndexerCapabilityResourceInput$outboundSchema: z.ZodType<
  IndexerCapabilityResourceInput$Outbound,
  z.ZodTypeDef,
  IndexerCapabilityResourceInput
> = z.object({
  id: z.number().int().optional(),
  limitsMax: z.nullable(z.number().int()).optional(),
  limitsDefault: z.nullable(z.number().int()).optional(),
  categories: z.nullable(z.array(IndexerCategoryInput$outboundSchema))
    .optional(),
  supportsRawSearch: z.boolean().optional(),
  searchParams: z.nullable(z.array(SearchParam$outboundSchema)).optional(),
  tvSearchParams: z.nullable(z.array(TvSearchParam$outboundSchema)).optional(),
  movieSearchParams: z.nullable(z.array(MovieSearchParam$outboundSchema))
    .optional(),
  musicSearchParams: z.nullable(z.array(MusicSearchParam$outboundSchema))
    .optional(),
  bookSearchParams: z.nullable(z.array(BookSearchParam$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndexerCapabilityResourceInput$ {
  /** @deprecated use `IndexerCapabilityResourceInput$inboundSchema` instead. */
  export const inboundSchema = IndexerCapabilityResourceInput$inboundSchema;
  /** @deprecated use `IndexerCapabilityResourceInput$outboundSchema` instead. */
  export const outboundSchema = IndexerCapabilityResourceInput$outboundSchema;
  /** @deprecated use `IndexerCapabilityResourceInput$Outbound` instead. */
  export type Outbound = IndexerCapabilityResourceInput$Outbound;
}

export function indexerCapabilityResourceInputToJSON(
  indexerCapabilityResourceInput: IndexerCapabilityResourceInput,
): string {
  return JSON.stringify(
    IndexerCapabilityResourceInput$outboundSchema.parse(
      indexerCapabilityResourceInput,
    ),
  );
}

export function indexerCapabilityResourceInputFromJSON(
  jsonString: string,
): SafeParseResult<IndexerCapabilityResourceInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndexerCapabilityResourceInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndexerCapabilityResourceInput' from JSON`,
  );
}
