/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { notificationDeleteApiV1NotificationId } from "../funcs/notificationDeleteApiV1NotificationId.js";
import { notificationGetApiV1Notification } from "../funcs/notificationGetApiV1Notification.js";
import { notificationGetApiV1NotificationId } from "../funcs/notificationGetApiV1NotificationId.js";
import { notificationGetApiV1NotificationSchema } from "../funcs/notificationGetApiV1NotificationSchema.js";
import { notificationPostApiV1Notification } from "../funcs/notificationPostApiV1Notification.js";
import { notificationPostApiV1NotificationActionName } from "../funcs/notificationPostApiV1NotificationActionName.js";
import { notificationPostApiV1NotificationTest } from "../funcs/notificationPostApiV1NotificationTest.js";
import { notificationPostApiV1NotificationTestall } from "../funcs/notificationPostApiV1NotificationTestall.js";
import { notificationPutApiV1NotificationId } from "../funcs/notificationPutApiV1NotificationId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Notification extends ClientSDK {
  async getApiV1NotificationId(
    request: operations.GetApiV1NotificationIdRequest,
    options?: RequestOptions,
  ): Promise<models.NotificationResource> {
    return unwrapAsync(notificationGetApiV1NotificationId(
      this,
      request,
      options,
    ));
  }

  async putApiV1NotificationId(
    request: operations.PutApiV1NotificationIdRequest,
    options?: RequestOptions,
  ): Promise<models.NotificationResource> {
    return unwrapAsync(notificationPutApiV1NotificationId(
      this,
      request,
      options,
    ));
  }

  async deleteApiV1NotificationId(
    request: operations.DeleteApiV1NotificationIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(notificationDeleteApiV1NotificationId(
      this,
      request,
      options,
    ));
  }

  async getApiV1Notification(
    options?: RequestOptions,
  ): Promise<Array<models.NotificationResource>> {
    return unwrapAsync(notificationGetApiV1Notification(
      this,
      options,
    ));
  }

  async postApiV1Notification(
    request: operations.PostApiV1NotificationRequest,
    options?: RequestOptions,
  ): Promise<models.NotificationResource> {
    return unwrapAsync(notificationPostApiV1Notification(
      this,
      request,
      options,
    ));
  }

  async getApiV1NotificationSchema(
    options?: RequestOptions,
  ): Promise<Array<models.NotificationResource>> {
    return unwrapAsync(notificationGetApiV1NotificationSchema(
      this,
      options,
    ));
  }

  async postApiV1NotificationTest(
    request: operations.PostApiV1NotificationTestRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(notificationPostApiV1NotificationTest(
      this,
      request,
      options,
    ));
  }

  async postApiV1NotificationTestall(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(notificationPostApiV1NotificationTestall(
      this,
      options,
    ));
  }

  async postApiV1NotificationActionName(
    request: operations.PostApiV1NotificationActionNameRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(notificationPostApiV1NotificationActionName(
      this,
      request,
      options,
    ));
  }
}
