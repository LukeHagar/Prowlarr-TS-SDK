/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { downloadClientDeleteApiV1DownloadclientBulk } from "../funcs/downloadClientDeleteApiV1DownloadclientBulk.js";
import { downloadClientDeleteApiV1DownloadclientId } from "../funcs/downloadClientDeleteApiV1DownloadclientId.js";
import { downloadClientGetApiV1Downloadclient } from "../funcs/downloadClientGetApiV1Downloadclient.js";
import { downloadClientGetApiV1DownloadclientId } from "../funcs/downloadClientGetApiV1DownloadclientId.js";
import { downloadClientGetApiV1DownloadclientSchema } from "../funcs/downloadClientGetApiV1DownloadclientSchema.js";
import { downloadClientPostApiV1Downloadclient } from "../funcs/downloadClientPostApiV1Downloadclient.js";
import { downloadClientPostApiV1DownloadclientActionName } from "../funcs/downloadClientPostApiV1DownloadclientActionName.js";
import { downloadClientPostApiV1DownloadclientTest } from "../funcs/downloadClientPostApiV1DownloadclientTest.js";
import { downloadClientPostApiV1DownloadclientTestall } from "../funcs/downloadClientPostApiV1DownloadclientTestall.js";
import { downloadClientPutApiV1DownloadclientBulk } from "../funcs/downloadClientPutApiV1DownloadclientBulk.js";
import { downloadClientPutApiV1DownloadclientId } from "../funcs/downloadClientPutApiV1DownloadclientId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class DownloadClient extends ClientSDK {
  async getApiV1DownloadclientId(
    request: operations.GetApiV1DownloadclientIdRequest,
    options?: RequestOptions,
  ): Promise<models.DownloadClientResource> {
    return unwrapAsync(downloadClientGetApiV1DownloadclientId(
      this,
      request,
      options,
    ));
  }

  async putApiV1DownloadclientId(
    request: operations.PutApiV1DownloadclientIdRequest,
    options?: RequestOptions,
  ): Promise<models.DownloadClientResource> {
    return unwrapAsync(downloadClientPutApiV1DownloadclientId(
      this,
      request,
      options,
    ));
  }

  async deleteApiV1DownloadclientId(
    request: operations.DeleteApiV1DownloadclientIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(downloadClientDeleteApiV1DownloadclientId(
      this,
      request,
      options,
    ));
  }

  async getApiV1Downloadclient(
    options?: RequestOptions,
  ): Promise<Array<models.DownloadClientResource>> {
    return unwrapAsync(downloadClientGetApiV1Downloadclient(
      this,
      options,
    ));
  }

  async postApiV1Downloadclient(
    request: operations.PostApiV1DownloadclientRequest,
    options?: RequestOptions,
  ): Promise<models.DownloadClientResource> {
    return unwrapAsync(downloadClientPostApiV1Downloadclient(
      this,
      request,
      options,
    ));
  }

  async putApiV1DownloadclientBulk(
    request?: models.DownloadClientBulkResource | undefined,
    options?: RequestOptions,
  ): Promise<models.DownloadClientResource> {
    return unwrapAsync(downloadClientPutApiV1DownloadclientBulk(
      this,
      request,
      options,
    ));
  }

  async deleteApiV1DownloadclientBulk(
    request?: models.DownloadClientBulkResource | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(downloadClientDeleteApiV1DownloadclientBulk(
      this,
      request,
      options,
    ));
  }

  async getApiV1DownloadclientSchema(
    options?: RequestOptions,
  ): Promise<Array<models.DownloadClientResource>> {
    return unwrapAsync(downloadClientGetApiV1DownloadclientSchema(
      this,
      options,
    ));
  }

  async postApiV1DownloadclientTest(
    request: operations.PostApiV1DownloadclientTestRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(downloadClientPostApiV1DownloadclientTest(
      this,
      request,
      options,
    ));
  }

  async postApiV1DownloadclientTestall(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(downloadClientPostApiV1DownloadclientTestall(
      this,
      options,
    ));
  }

  async postApiV1DownloadclientActionName(
    request: operations.PostApiV1DownloadclientActionNameRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(downloadClientPostApiV1DownloadclientActionName(
      this,
      request,
      options,
    ));
  }
}
