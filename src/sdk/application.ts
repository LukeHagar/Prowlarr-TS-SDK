/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { applicationDeleteApiV1ApplicationsBulk } from "../funcs/applicationDeleteApiV1ApplicationsBulk.js";
import { applicationDeleteApiV1ApplicationsId } from "../funcs/applicationDeleteApiV1ApplicationsId.js";
import { applicationGetApiV1Applications } from "../funcs/applicationGetApiV1Applications.js";
import { applicationGetApiV1ApplicationsId } from "../funcs/applicationGetApiV1ApplicationsId.js";
import { applicationGetApiV1ApplicationsSchema } from "../funcs/applicationGetApiV1ApplicationsSchema.js";
import { applicationPostApiV1Applications } from "../funcs/applicationPostApiV1Applications.js";
import { applicationPostApiV1ApplicationsActionName } from "../funcs/applicationPostApiV1ApplicationsActionName.js";
import { applicationPostApiV1ApplicationsTest } from "../funcs/applicationPostApiV1ApplicationsTest.js";
import { applicationPostApiV1ApplicationsTestall } from "../funcs/applicationPostApiV1ApplicationsTestall.js";
import { applicationPutApiV1ApplicationsBulk } from "../funcs/applicationPutApiV1ApplicationsBulk.js";
import { applicationPutApiV1ApplicationsId } from "../funcs/applicationPutApiV1ApplicationsId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Application extends ClientSDK {
  async getApiV1ApplicationsId(
    request: operations.GetApiV1ApplicationsIdRequest,
    options?: RequestOptions,
  ): Promise<models.ApplicationResource> {
    return unwrapAsync(applicationGetApiV1ApplicationsId(
      this,
      request,
      options,
    ));
  }

  async putApiV1ApplicationsId(
    request: operations.PutApiV1ApplicationsIdRequest,
    options?: RequestOptions,
  ): Promise<models.ApplicationResource> {
    return unwrapAsync(applicationPutApiV1ApplicationsId(
      this,
      request,
      options,
    ));
  }

  async deleteApiV1ApplicationsId(
    request: operations.DeleteApiV1ApplicationsIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(applicationDeleteApiV1ApplicationsId(
      this,
      request,
      options,
    ));
  }

  async getApiV1Applications(
    options?: RequestOptions,
  ): Promise<Array<models.ApplicationResource>> {
    return unwrapAsync(applicationGetApiV1Applications(
      this,
      options,
    ));
  }

  async postApiV1Applications(
    request: operations.PostApiV1ApplicationsRequest,
    options?: RequestOptions,
  ): Promise<models.ApplicationResource> {
    return unwrapAsync(applicationPostApiV1Applications(
      this,
      request,
      options,
    ));
  }

  async putApiV1ApplicationsBulk(
    request?: models.ApplicationBulkResource | undefined,
    options?: RequestOptions,
  ): Promise<models.ApplicationResource> {
    return unwrapAsync(applicationPutApiV1ApplicationsBulk(
      this,
      request,
      options,
    ));
  }

  async deleteApiV1ApplicationsBulk(
    request?: models.ApplicationBulkResource | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(applicationDeleteApiV1ApplicationsBulk(
      this,
      request,
      options,
    ));
  }

  async getApiV1ApplicationsSchema(
    options?: RequestOptions,
  ): Promise<Array<models.ApplicationResource>> {
    return unwrapAsync(applicationGetApiV1ApplicationsSchema(
      this,
      options,
    ));
  }

  async postApiV1ApplicationsTest(
    request: operations.PostApiV1ApplicationsTestRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(applicationPostApiV1ApplicationsTest(
      this,
      request,
      options,
    ));
  }

  async postApiV1ApplicationsTestall(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(applicationPostApiV1ApplicationsTestall(
      this,
      options,
    ));
  }

  async postApiV1ApplicationsActionName(
    request: operations.PostApiV1ApplicationsActionNameRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(applicationPostApiV1ApplicationsActionName(
      this,
      request,
      options,
    ));
  }
}
